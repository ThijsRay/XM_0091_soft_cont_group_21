# PHP backend
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: backend
  name: backend
spec:
  selector:
    matchLabels:
      app: backend
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: backend
    spec:
      containers:
      - image: thijsray/backend
        name: socon-backend
        resources: {}
status: {}
---
# PHP backend autoscaler
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: backend
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: backend
  minReplicas: 1
  maxReplicas: 5
  targetCPUUtilizationPercentage: 60


---
# HTTP frontend
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: frontend
  name: frontend
spec:
  selector:
    matchLabels:
      app: frontend
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: frontend
    spec:
      containers:
      - image: thijsray/frontend
        name: socon-frontend
        resources: {}
status: {}
---
# HTTP frontend autoscaler
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: frontend
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: frontend
  minReplicas: 1
  maxReplicas: 5
  targetCPUUtilizationPercentage: 60
---


# HTTP Ingress
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: ingress
  name: ingress
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ingress
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: ingress
    spec:
      containers:
      - image: thijsray/ingress
        name: socon-ingress
        resources: {}
status: {}
---
# Frontend inbound traffic load balancer
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app: ingress
  name: ingress
spec:
  ports:
  - port: 80
    protocol: TCP
    targetPort: 80
  selector:
    app: ingress
  type: LoadBalancer
status:
  loadBalancer: {}

# TODO allow ingress to talk to both frontend and backend
