# PHP backend
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: backend
  name: backend
spec:
  selector:
    matchLabels:
      app: backend
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: backend
    spec:
      containers:
      - image: thijsray/backend
        name: socon-backend
        resources: {}
        env:
          - name: POSTGRES_PASSWORD
            valueFrom:
              secretKeyRef:
                name: postgres-credentials
                key: password
                optional: false
          - name: POSTGRES_HOST
            valueFrom:
              configMapKeyRef:
                name: config
                key: postgres_host
          - name: POSTGRES_USER
            valueFrom:
              configMapKeyRef:
                name: config
                key: postgres_user
          - name: POSTGRES_DB
            valueFrom:
              configMapKeyRef:
                name: config
                key: postgres_db
status: {}
---
# PHP backend autoscaler
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: backend
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: backend
  minReplicas: 1
  maxReplicas: 10
  targetCPUUtilizationPercentage: 60
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: backend
  name: backend
spec:
  selector:
    app: backend
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
---
# HTTP frontend
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: frontend
  name: frontend
spec:
  selector:
    matchLabels:
      app: frontend
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: frontend
    spec:
      containers:
      - image: thijsray/frontend
        name: socon-frontend
        resources: {}
        livenessProbe:
          httpGet:
            path: /
            port: 80
            scheme: HTTP
          initialDelaySeconds: 2
          timeoutSeconds: 1
          periodSeconds: 5
          successThreshold: 1
          failureThreshold: 5
        readinessProbe:
          httpGet:
            path: /
            port: 80
            scheme: HTTP
          initialDelaySeconds: 2
          timeoutSeconds: 1
          periodSeconds: 5
          successThreshold: 1
          failureThreshold: 5
status: {}
---
# HTTP frontend autoscaler
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: frontend
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: frontend
  minReplicas: 1
  maxReplicas: 10
  targetCPUUtilizationPercentage: 60
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: frontend
  name: frontend
spec:
  selector:
    app: frontend
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
---
# Persistent volume claim for postgres
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pv-claim
  labels: # TODO remove
    topology.kubernetes.io/zone: europe-west1
spec:
  storageClassName: standard-rwo
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
# Postgres deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  labels:
    topology.kubernetes.io/zone: europe-west1
spec:
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - image: postgres:15.1
          name: socon-database
          volumeMounts:
             - mountPath: /var/lib/postgresql
               subPath: data
               name: postgres
          env:
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-credentials
                  key: password
                  optional: false
      volumes:
        - name: postgres
          persistentVolumeClaim:
            claimName: postgres-pv-claim
---
# Postgres service
apiVersion: v1
kind: Service
metadata:
  labels:
    app: postgres
  name: postgres
spec:
  selector:
    app: postgres
  ports:
    - port: 5432
